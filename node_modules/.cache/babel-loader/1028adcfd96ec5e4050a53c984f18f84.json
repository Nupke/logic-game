{"ast":null,"code":"var _jsxFileName = \"/Users/andrey/WebstormProjects/logic-game/src/components/Timer.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { useSelector } from \"react-redux\";\n\nconst padTime = time => {\n  return String(time).length === 1 ? `0${time}` : `${time}`;\n};\n\nconst format = time => {\n  // Convert seconds into minutes and take the whole part\n  const minutes = Math.floor(time / 60); // Get the seconds left after converting minutes\n\n  const seconds = time % 60; //Return combined values as string in format mm:ss\n\n  return `${minutes}:${padTime(seconds)}`;\n};\n\nexport default function Timer() {\n  const allItems = useSelector(state => state.app.example);\n  const currentCount = useSelector(state => state.app.count);\n  const [counter, setCounter] = React.useState(60);\n  React.useEffect(() => {\n    let timer;\n\n    if (counter > 0) {\n      timer = setTimeout(() => setCounter(c => c - 1), 1000);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [counter]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, counter === 0 ? Swal.fire(`finall ${currentCount}/${allItems}`) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 19\n    }\n  }, \"Countdown: \", format(counter)));\n}","map":{"version":3,"sources":["/Users/andrey/WebstormProjects/logic-game/src/components/Timer.js"],"names":["React","useState","useEffect","Swal","useSelector","padTime","time","String","length","format","minutes","Math","floor","seconds","Timer","allItems","state","app","example","currentCount","count","counter","setCounter","timer","setTimeout","c","clearTimeout","fire"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AACA,MAAMC,OAAO,GAAGC,IAAI,IAAI;AACpB,SAAOC,MAAM,CAACD,IAAD,CAAN,CAAaE,MAAb,KAAwB,CAAxB,GAA6B,IAAGF,IAAK,EAArC,GAA0C,GAAEA,IAAK,EAAxD;AACH,CAFD;;AAIA,MAAMG,MAAM,GAAGH,IAAI,IAAI;AACnB;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAG,EAAlB,CAAhB,CAFmB,CAInB;;AACA,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB,CALmB,CAOnB;;AACA,SAAQ,GAAEI,OAAQ,IAAGL,OAAO,CAACQ,OAAD,CAAU,EAAtC;AACH,CATD;;AAUA,eAAe,SAASC,KAAT,GAAiB;AAE5B,QAAMC,QAAQ,GAAGX,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUC,OAApB,CAA5B;AACA,QAAMC,YAAY,GAAGf,WAAW,CAACY,KAAK,IAAIA,KAAK,CAACC,GAAN,CAAUG,KAApB,CAAhC;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBtB,KAAK,CAACC,QAAN,CAAe,EAAf,CAA9B;AACAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AAClB,QAAIqB,KAAJ;;AACA,QAAIF,OAAO,GAAG,CAAd,EAAiB;AACbE,MAAAA,KAAK,GAAGC,UAAU,CAAC,MAAMF,UAAU,CAACG,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAjB,EAA+B,IAA/B,CAAlB;AACH;;AAED,WAAO,MAAM;AACT,UAAIF,KAAJ,EAAW;AACPG,QAAAA,YAAY,CAACH,KAAD,CAAZ;AACH;AACJ,KAJD;AAKH,GAXD,EAWG,CAACF,OAAD,CAXH;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,OAAO,KAAK,CAAZ,GACGlB,IAAI,CAACwB,IAAL,CAAW,UAASR,YAAa,IAAGJ,QAAS,EAA7C,CADH,gBAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAiBN,MAAM,CAACY,OAAD,CAAvB,CAHV,CADJ;AAOH","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Swal from \"sweetalert2\";\nimport {useSelector} from \"react-redux\";\nconst padTime = time => {\n    return String(time).length === 1 ? `0${time}` : `${time}`;\n};\n\nconst format = time => {\n    // Convert seconds into minutes and take the whole part\n    const minutes = Math.floor(time / 60);\n\n    // Get the seconds left after converting minutes\n    const seconds = time % 60;\n\n    //Return combined values as string in format mm:ss\n    return `${minutes}:${padTime(seconds)}`;\n};\nexport default function Timer() {\n\n    const allItems = useSelector(state => state.app.example);\n    const currentCount = useSelector(state => state.app.count);\n\n    const [counter, setCounter] = React.useState(60);\n    React.useEffect(() => {\n        let timer;\n        if (counter > 0) {\n            timer = setTimeout(() => setCounter(c => c - 1), 1000);\n        }\n\n        return () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n        };\n    }, [counter]);\n\n    return (\n        <div className=\"App\">\n            {counter === 0 ?\n                Swal.fire(`finall ${currentCount}/${allItems}`)\n                : <div>Countdown: {format(counter)}</div>}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}