{"ast":null,"code":"var _jsxFileName = \"/Users/andrey/WebstormProjects/logic-game/src/components/Timer.js\";\nimport React from \"react\";\nimport { Redirect } from \"react-router\";\nimport { resetTask } from \"../reducer/actions\";\nimport { useDispatch } from \"react-redux\";\n\nconst padTime = time => {\n  return String(time).length === 1 ? `0${time}` : `${time}`;\n};\n\nconst format = time => {\n  // Convert seconds into minutes and take the whole part\n  const minutes = Math.floor(time / 60); // Get the seconds left after converting minutes\n\n  const seconds = time % 60; //Return combined values as string in format mm:ss\n\n  return `${minutes}:${padTime(seconds)}`;\n};\n\nexport default function Timer(props) {\n  const dispatch = useDispatch();\n  const [counter, setCounter] = React.useState(10);\n  React.useEffect(() => {\n    let timer;\n\n    if (counter > 0) {\n      timer = setTimeout(() => setCounter(c => c - 1), 1000);\n    }\n\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [counter]);\n\n  const resetHandler = () => {\n    dispatch(resetTask());\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, counter === 0 ? resetHandler : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 46\n    }\n  }, \"time: \", format(counter)));\n}","map":{"version":3,"sources":["/Users/andrey/WebstormProjects/logic-game/src/components/Timer.js"],"names":["React","Redirect","resetTask","useDispatch","padTime","time","String","length","format","minutes","Math","floor","seconds","Timer","props","dispatch","counter","setCounter","useState","useEffect","timer","setTimeout","c","clearTimeout","resetHandler"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,cAAvB;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,WAAR,QAA0B,aAA1B;;AAEA,MAAMC,OAAO,GAAGC,IAAI,IAAI;AACpB,SAAOC,MAAM,CAACD,IAAD,CAAN,CAAaE,MAAb,KAAwB,CAAxB,GAA6B,IAAGF,IAAK,EAArC,GAA0C,GAAEA,IAAK,EAAxD;AACH,CAFD;;AAIA,MAAMG,MAAM,GAAGH,IAAI,IAAI;AACnB;AACA,QAAMI,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWN,IAAI,GAAG,EAAlB,CAAhB,CAFmB,CAInB;;AACA,QAAMO,OAAO,GAAGP,IAAI,GAAG,EAAvB,CALmB,CAOnB;;AACA,SAAQ,GAAEI,OAAQ,IAAGL,OAAO,CAACQ,OAAD,CAAU,EAAtC;AACH,CATD;;AAUA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsB;AACjC,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAM,CAACa,OAAD,EAAUC,UAAV,IAAwBjB,KAAK,CAACkB,QAAN,CAAe,EAAf,CAA9B;AACAlB,EAAAA,KAAK,CAACmB,SAAN,CAAgB,MAAM;AAClB,QAAIC,KAAJ;;AACA,QAAIJ,OAAO,GAAG,CAAd,EAAiB;AACbI,MAAAA,KAAK,GAAGC,UAAU,CAAC,MAAMJ,UAAU,CAACK,CAAC,IAAIA,CAAC,GAAG,CAAV,CAAjB,EAA+B,IAA/B,CAAlB;AACH;;AAED,WAAO,MAAM;AACT,UAAIF,KAAJ,EAAW;AACPG,QAAAA,YAAY,CAACH,KAAD,CAAZ;AACH;AACJ,KAJD;AAKH,GAXD,EAWG,CAACJ,OAAD,CAXH;;AAaA,QAAMQ,YAAY,GAAG,MAAM;AACvBT,IAAAA,QAAQ,CAACb,SAAS,EAAV,CAAR;AACA,wBAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAG,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKc,OAAO,KAAK,CAAZ,GAAiBQ,YAAjB,gBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYhB,MAAM,CAACQ,OAAD,CAAlB,CADrC,CADJ;AAKH","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router\";\nimport {resetTask} from \"../reducer/actions\";\nimport {useDispatch} from \"react-redux\";\n\nconst padTime = time => {\n    return String(time).length === 1 ? `0${time}` : `${time}`;\n};\n\nconst format = time => {\n    // Convert seconds into minutes and take the whole part\n    const minutes = Math.floor(time / 60);\n\n    // Get the seconds left after converting minutes\n    const seconds = time % 60;\n\n    //Return combined values as string in format mm:ss\n    return `${minutes}:${padTime(seconds)}`;\n};\nexport default function Timer(props) {\n    const dispatch = useDispatch();\n\n    const [counter, setCounter] = React.useState(10);\n    React.useEffect(() => {\n        let timer;\n        if (counter > 0) {\n            timer = setTimeout(() => setCounter(c => c - 1), 1000);\n        }\n\n        return () => {\n            if (timer) {\n                clearTimeout(timer);\n            }\n        };\n    }, [counter]);\n\n    const resetHandler = () => {\n        dispatch(resetTask());\n        return <Redirect to={`/`}/>\n    }\n\n    return (\n        <div className=\"App\">\n            {counter === 0 ?  resetHandler : <div>time: {format(counter)}</div>}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}